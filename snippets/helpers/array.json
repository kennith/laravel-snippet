{
    "Arr::accessible": {
        "prefix": "Arr::accessible",
        "body": [
            "Arr::accessible(${1:\\$value})"
        ],
        "description": "Checks that the given value is array accessible."
    },
    "Arr::add": {
        "prefix": "Arr::add",
        "body": [
            "Arr::add(${1:\\$array}, ${2:\\$key}, ${3:\\$value})"
        ],
        "description": "Adds a given key / value pair to an array if the given key doesn't already exist in the array or is set to null."
    },
    "Arr::collapse": {
        "prefix": "Arr::collapse",
        "body": [
            "Arr::collapse(${1:\\$array})"
        ],
        "description": "Collapses an array of arrays into a single array."
    },
    "Arr::crossJoin": {
        "prefix": "Arr::crossJoin",
        "body": [
            "Arr::crossJoin(${1:...\\$arrays})"
        ],
        "description": "Cross joins the given arrays, returning a Cartesian product with all possible permutations."
    },
    "Arr::divide": {
        "prefix": "Arr::divide",
        "body": [
            "Arr::divide(${1:\\$array})"
        ],
        "description": "Returns two arrays, one containing the keys, and the other containing the values of the given array."
    },
    "Arr::dot": {
        "prefix": "Arr::dot",
        "body": [
            "Arr::dot(${1:\\$array})"
        ],
        "description": "Flattens a multi-dimensional array into a single level array that uses \"dot\" notation to indicate depth."
    },
    "Arr::except": {
        "prefix": "Arr::except",
        "body": [
            "Arr::except(${1:\\$array, ${2:\\$keys})"
        ],
        "description": "Removes the given key / value pairs from an array."
    },
    "Arr::exists": {
        "prefix": "Arr::exists",
        "body": [
            "Arr::exists(${1:\\$array}, ${2:\\$key})"
        ],
        "description": "Checks that the given key exists in the provided array."
    },
    "Arr::first": {
        "prefix": "Arr::first",
        "body": [
            "Arr::first(${1:\\$array})"
        ],
        "description": "Returns the first element of an array passing a given truth test."
    },
    "Arr::flatten": {
        "prefix": "Arr::flatten",
        "body": [
            "Arr::flatten(${1:\\$array})"
        ],
        "description": "Flattens a multi-dimensional array into a single level array."
    },
    "Arr::forget": {
        "prefix": "Arr::forget",
        "body": [
            "Arr::forget(${1:\\$array}, ${2:\\$keys})"
        ],
        "description": "Removes a given key / value pair from a deeply nested array using \"dot\" notation."
    },
    "Arr::get": {
        "prefix": "Arr::get",
        "body": [
            "Arr::get(${1:\\$array}, ${2:\\$key})"
        ],
        "description": "Retrieves a value from a deeply nested array using \"dot\" notation."
    },
    "Arr::has": {
        "prefix": "Arr::has",
        "body": [
            "Arr::has(${1:\\$array}, ${2:\\$keys})"
        ],
        "description": "Checks whether a given item or items exists in an array using \"dot\" notation."
    },
    "Arr::hasAny": {
        "prefix": "Arr::hasAny",
        "body": [
            "Arr::hasAny(${1:\\$array}, ${2:\\$keys})"
        ],
        "description": "Checks whether any item in a given set exists in an array using \"dot\" notation."
    },
    "Arr::isAssoc returns true": {
        "prefix": "Arr::isAssoc",
        "body": [
            "Arr::isAssoc(${1:\\$array})"
        ],
        "description": "Returns true if the given array is an associative array. An array is considered \"associative\" if it doesn't have sequential numerical keys beginning with zero."
    },
    "Arr::last": {
        "prefix": "Arr::last",
        "body": [
            "Arr::last(${1:\\$array})"
        ],
        "description": "Returns the last element of an array passing a given truth test."
    },
    "Arr::only": {
        "prefix": "Arr::only",
        "body": [
            "Arr::only(${1:\\$array}, ${2:\\$keys})"
        ],
        "description": "Returns only the specified key / value pairs from the given array."
    },
    "Arr::pluck": {
        "prefix": "Arr::pluck",
        "body": [
            "Arr::pluck(${1:\\$array}, ${2:\\$value})"
        ],
        "description": "Retrieves all of the values for a given key from an array."
    },
    "Arr::prepend": {
        "prefix": "Arr::prepend",
        "body": [
            "Arr::prepend(${1:\\$array}, ${2:\\$value})"
        ],
        "description": "Push an item onto the beginning of an array."
    },
    "Arr::pull": {
        "prefix": "Arr::pull",
        "body": [
            "Arr::pull(${1:\\$array}, ${1:\\$key})"
        ],
        "description": "Returns and removes a key / value pair from an array."
    },
    "Arr::query": {
        "prefix": "Arr::query",
        "body": [
            "Arr::query(${1:\\$array})"
        ],
        "description": "Converts the array into a query string."
    },
    "Arr::random": {
        "prefix": "Arr::random",
        "body": [
            "Arr::random(${1:\\$array})"
        ],
        "description": "Returns a random value from an array."
    },
    "Arr::set": {
        "prefix": "Arr::set",
        "body": [
            "Arr::set(${1:\\$array}, ${2:\\$key}, ${3:\\$value})"
        ],
        "description": "Sets a value within a deeply nested array using \"dot\" notation."
    },
    "Arr::shuffle": {
        "prefix": "Arr::shuffle",
        "body": [
            "Arr::shuffle(${1:\\$array})"
        ],
        "description": "Randomly shuffles the items in the array."
    },
    "Arr::sort": {
        "prefix": "Arr::sort",
        "body": [
            "Arr::sort(${1:\\$array})"
        ],
        "description": "Sorts an array by its values."
    },
    "Arr::sortRecursive": {
        "prefix": "Arr::sortRecursive",
        "body": [
            "Arr::sortRecursive(${1:\\$array})"
        ],
        "description": "Recursively sorts an array using the sort function for numeric sub=arrays and ksort for associative subarrays."
    },
    "Arr::where": {
        "prefix": "Arr::where",
        "body": [
            "Arr::where(${1:\\$array}, ${2:\\$callback})"
        ],
        "description": "Filters an array using the given Closure."
    },
    "Arr::wrap": {
        "prefix": "Arr::wrap",
        "body": [
            "Arr::wrap(${1:\\$value})"
        ],
        "description": "Wraps the given value in an array. If the given value is already an array it will not be changed."
    },
    "data_fill()": {
        "prefix": "data_fill()",
        "body": [
            "data_fill(${1:\\$target}, ${2:\\$key}, ${3:\\$value})"
        ],
        "description": "The `data_fill` function sets a missing value within a nested array or object using \"dot\" notation."
    },
    "data_get()": {
        "prefix": "data_get()",
        "body": [
            "data_get(${1:\\$target}, ${2:\\$key})"
        ],
        "description": "The `data_get` function retrieves a value from a nested array or object using \"dot\" notation."
    },
    "data_set()": {
        "prefix": "data_set()",
        "body": [
            "data_set(${1:\\$target}, ${2:\\$key}, ${3:\\$value})"
        ],
        "description": "The `data_set` function sets a value within a nested array or object using \"dot\" notation."
    },
    "head()": {
        "prefix": "head()",
        "body": [
            "head(${1:\\$array})"
        ],
        "description": "The `head` function returns the first element in the given array."
    },
    "last()": {
        "prefix": "last()",
        "body": [
            "last(${1:\\$array})"
        ],
        "description": "The `last` function returns the last element in the given array."
    }
}