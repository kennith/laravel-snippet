{
    "any": {
        "prefix": "any",
        "body": [
            "any();"
        ]
    },
    "anything": {
        "prefix": "anything",
        "body": [
            "anything();"
        ]
    },
    "arrayHasKey": {
        "prefix": "arrayHasKey",
        "body": [
            "arrayHasKey(${1:key});"
        ]
    },
    "assertArrayHasKey": {
        "prefix": "assertArrayHasKey",
        "body": [
            "assertArrayHasKey(${1:key}, ${2:array});"
        ]
    },
    "assertArrayNotHasKey": {
        "prefix": "assertArrayNotHasKey",
        "body": [
            "assertArrayNotHasKey(${1:key}, ${2:array});"
        ]
    },
    "assertClassHasAttribute": {
        "prefix": "assertClassHasAttribute",
        "body": [
            "assertClassHasAttribute(${1:string:attributeName}, ${2:string:className});"
        ]
    },
    "assertClassHasStaticAttribute": {
        "prefix": "assertClassHasStaticAttribute",
        "body": [
            "assertClassHasStaticAttribute(${1:string:attributeName}, ${2:string:className});"
        ]
    },
    "assertClassNotHasAttribute": {
        "prefix": "assertClassNotHasAttribute",
        "body": [
            "assertClassNotHasAttribute(${1:string:attributeName}, ${2:string:className});"
        ]
    },
    "assertClassNotHasStaticAttribute": {
        "prefix": "assertClassNotHasStaticAttribute",
        "body": [
            "assertClassNotHasStaticAttribute(${1:string:attributeName}, ${2:string:className});"
        ]
    },
    "assertContains": {
        "prefix": "assertContains",
        "body": [
            "assertContains(${1:needle}, ${2:iterable:haystack});"
        ]
    },
    "assertContainsEquals": {
        "prefix": "assertContainsEquals",
        "body": [
            "assertContainsEquals(${1:needle}, ${2:iterable:haystack});"
        ]
    },
    "assertContainsOnly": {
        "prefix": "assertContainsOnly",
        "body": [
            "assertContainsOnly(${1:string:type}, ${2:iterable:haystack});"
        ]
    },
    "assertContainsOnlyInstancesOf": {
        "prefix": "assertContainsOnlyInstancesOf",
        "body": [
            "assertContainsOnlyInstancesOf(${1:string:className}, ${2:iterable:haystack});"
        ]
    },
    "assertCount": {
        "prefix": "assertCount",
        "body": [
            "assertCount(${1:int:expectedCount}, ${2:haystack});"
        ]
    },
    "assertDirectoryDoesNotExist": {
        "prefix": "assertDirectoryDoesNotExist",
        "body": [
            "assertDirectoryDoesNotExist(${1:string:directory});"
        ]
    },
    "assertDirectoryExists": {
        "prefix": "assertDirectoryExists",
        "body": [
            "assertDirectoryExists(${1:string:directory});"
        ]
    },
    "assertDirectoryIsNotReadable": {
        "prefix": "assertDirectoryIsNotReadable",
        "body": [
            "assertDirectoryIsNotReadable(${1:string:directory});"
        ]
    },
    "assertDirectoryIsNotWritable": {
        "prefix": "assertDirectoryIsNotWritable",
        "body": [
            "assertDirectoryIsNotWritable(${1:string:directory});"
        ]
    },
    "assertDirectoryIsReadable": {
        "prefix": "assertDirectoryIsReadable",
        "body": [
            "assertDirectoryIsReadable(${1:string:directory});"
        ]
    },
    "assertDirectoryIsWritable": {
        "prefix": "assertDirectoryIsWritable",
        "body": [
            "assertDirectoryIsWritable(${1:string:directory});"
        ]
    },
    "assertDirectoryNotExists": {
        "prefix": "assertDirectoryNotExists",
        "body": [
            "assertDirectoryNotExists(${1:string:directory});"
        ]
    },
    "assertDirectoryNotIsReadable": {
        "prefix": "assertDirectoryNotIsReadable",
        "body": [
            "assertDirectoryNotIsReadable(${1:string:directory});"
        ]
    },
    "assertDirectoryNotIsWritable": {
        "prefix": "assertDirectoryNotIsWritable",
        "body": [
            "assertDirectoryNotIsWritable(${1:string:directory});"
        ]
    },
    "assertDoesNotMatchRegularExpression": {
        "prefix": "assertDoesNotMatchRegularExpression",
        "body": [
            "assertDoesNotMatchRegularExpression(${1:string:pattern}, ${2:string:string});"
        ]
    },
    "assertEmpty": {
        "prefix": "assertEmpty",
        "body": [
            "assertEmpty(${1:actual});"
        ]
    },
    "assertEquals": {
        "prefix": "assertEquals",
        "body": [
            "assertEquals(${1:expected}, ${2:actual});"
        ]
    },
    "assertEqualsCanonicalizing": {
        "prefix": "assertEqualsCanonicalizing",
        "body": [
            "assertEqualsCanonicalizing(${1:expected}, ${2:actual});"
        ]
    },
    "assertEqualsIgnoringCase": {
        "prefix": "assertEqualsIgnoringCase",
        "body": [
            "assertEqualsIgnoringCase(${1:expected}, ${2:actual});"
        ]
    },
    "assertEqualsWithDelta": {
        "prefix": "assertEqualsWithDelta",
        "body": [
            "assertEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});"
        ]
    },
    "assertEqualXMLStructure": {
        "prefix": "assertEqualXMLStructure",
        "body": [
            "assertEqualXMLStructure(${1:DOMElement:expectedElement}, ${2:DOMElement:actualElement});"
        ]
    },
    "assertFalse": {
        "prefix": "assertFalse",
        "body": [
            "assertFalse(${1:condition});"
        ]
    },
    "assertFileDoesNotExist": {
        "prefix": "assertFileDoesNotExist",
        "body": [
            "assertFileDoesNotExist(${1:string:filename});"
        ]
    },
    "assertFileEquals": {
        "prefix": "assertFileEquals",
        "body": [
            "assertFileEquals(${1:string:expected}, ${2:string:actual});"
        ]
    },
    "assertFileEqualsCanonicalizing": {
        "prefix": "assertFileEqualsCanonicalizing",
        "body": [
            "assertFileEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});"
        ]
    },
    "assertFileEqualsIgnoringCase": {
        "prefix": "assertFileEqualsIgnoringCase",
        "body": [
            "assertFileEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});"
        ]
    },
    "assertFileExists": {
        "prefix": "assertFileExists",
        "body": [
            "assertFileExists(${1:string:filename});"
        ]
    },
    "assertFileIsNotReadable": {
        "prefix": "assertFileIsNotReadable",
        "body": [
            "assertFileIsNotReadable(${1:string:file});"
        ]
    },
    "assertFileIsNotWritable": {
        "prefix": "assertFileIsNotWritable",
        "body": [
            "assertFileIsNotWritable(${1:string:file});"
        ]
    },
    "assertFileIsReadable": {
        "prefix": "assertFileIsReadable",
        "body": [
            "assertFileIsReadable(${1:string:file});"
        ]
    },
    "assertFileIsWritable": {
        "prefix": "assertFileIsWritable",
        "body": [
            "assertFileIsWritable(${1:string:file});"
        ]
    },
    "assertFileNotEquals": {
        "prefix": "assertFileNotEquals",
        "body": [
            "assertFileNotEquals(${1:string:expected}, ${2:string:actual});"
        ]
    },
    "assertFileNotEqualsCanonicalizing": {
        "prefix": "assertFileNotEqualsCanonicalizing",
        "body": [
            "assertFileNotEqualsCanonicalizing(${1:string:expected}, ${2:string:actual});"
        ]
    },
    "assertFileNotEqualsIgnoringCase": {
        "prefix": "assertFileNotEqualsIgnoringCase",
        "body": [
            "assertFileNotEqualsIgnoringCase(${1:string:expected}, ${2:string:actual});"
        ]
    },
    "assertFileNotExists": {
        "prefix": "assertFileNotExists",
        "body": [
            "assertFileNotExists(${1:string:filename});"
        ]
    },
    "assertFileNotIsReadable": {
        "prefix": "assertFileNotIsReadable",
        "body": [
            "assertFileNotIsReadable(${1:string:file});"
        ]
    },
    "assertFileNotIsWritable": {
        "prefix": "assertFileNotIsWritable",
        "body": [
            "assertFileNotIsWritable(${1:string:file});"
        ]
    },
    "assertFinite": {
        "prefix": "assertFinite",
        "body": [
            "assertFinite(${1:actual});"
        ]
    },
    "assertGreaterThan": {
        "prefix": "assertGreaterThan",
        "body": [
            "assertGreaterThan(${1:expected}, ${2:actual});"
        ]
    },
    "assertGreaterThanOrEqual": {
        "prefix": "assertGreaterThanOrEqual",
        "body": [
            "assertGreaterThanOrEqual(${1:expected}, ${2:actual});"
        ]
    },
    "assertInfinite": {
        "prefix": "assertInfinite",
        "body": [
            "assertInfinite(${1:actual});"
        ]
    },
    "assertInstanceOf": {
        "prefix": "assertInstanceOf",
        "body": [
            "assertInstanceOf(${1:string:expected}, ${2:actual});"
        ]
    },
    "assertIsArray": {
        "prefix": "assertIsArray",
        "body": [
            "assertIsArray(${1:actual});"
        ]
    },
    "assertIsBool": {
        "prefix": "assertIsBool",
        "body": [
            "assertIsBool(${1:actual});"
        ]
    },
    "assertIsCallable": {
        "prefix": "assertIsCallable",
        "body": [
            "assertIsCallable(${1:actual});"
        ]
    },
    "assertIsFloat": {
        "prefix": "assertIsFloat",
        "body": [
            "assertIsFloat(${1:actual});"
        ]
    },
    "assertIsInt": {
        "prefix": "assertIsInt",
        "body": [
            "assertIsInt(${1:actual});"
        ]
    },
    "assertIsIterable": {
        "prefix": "assertIsIterable",
        "body": [
            "assertIsIterable(${1:actual});"
        ]
    },
    "assertIsNotArray": {
        "prefix": "assertIsNotArray",
        "body": [
            "assertIsNotArray(${1:actual});"
        ]
    },
    "assertIsNotBool": {
        "prefix": "assertIsNotBool",
        "body": [
            "assertIsNotBool(${1:actual});"
        ]
    },
    "assertIsNotCallable": {
        "prefix": "assertIsNotCallable",
        "body": [
            "assertIsNotCallable(${1:actual});"
        ]
    },
    "assertIsNotFloat": {
        "prefix": "assertIsNotFloat",
        "body": [
            "assertIsNotFloat(${1:actual});"
        ]
    },
    "assertIsNotInt": {
        "prefix": "assertIsNotInt",
        "body": [
            "assertIsNotInt(${1:actual});"
        ]
    },
    "assertIsNotIterable": {
        "prefix": "assertIsNotIterable",
        "body": [
            "assertIsNotIterable(${1:actual});"
        ]
    },
    "assertIsNotNumeric": {
        "prefix": "assertIsNotNumeric",
        "body": [
            "assertIsNotNumeric(${1:actual});"
        ]
    },
    "assertIsNotObject": {
        "prefix": "assertIsNotObject",
        "body": [
            "assertIsNotObject(${1:actual});"
        ]
    },
    "assertIsNotReadable": {
        "prefix": "assertIsNotReadable",
        "body": [
            "assertIsNotReadable(${1:string:filename});"
        ]
    },
    "assertIsNotResource": {
        "prefix": "assertIsNotResource",
        "body": [
            "assertIsNotResource(${1:actual});"
        ]
    },
    "assertIsNotScalar": {
        "prefix": "assertIsNotScalar",
        "body": [
            "assertIsNotScalar(${1:actual});"
        ]
    },
    "assertIsNotString": {
        "prefix": "assertIsNotString",
        "body": [
            "assertIsNotString(${1:actual});"
        ]
    },
    "assertIsNotWritable": {
        "prefix": "assertIsNotWritable",
        "body": [
            "assertIsNotWritable(${1:string:filename});"
        ]
    },
    "assertIsNumeric": {
        "prefix": "assertIsNumeric",
        "body": [
            "assertIsNumeric(${1:actual});"
        ]
    },
    "assertIsObject": {
        "prefix": "assertIsObject",
        "body": [
            "assertIsObject(${1:actual});"
        ]
    },
    "assertIsReadable": {
        "prefix": "assertIsReadable",
        "body": [
            "assertIsReadable(${1:string:filename});"
        ]
    },
    "assertIsResource": {
        "prefix": "assertIsResource",
        "body": [
            "assertIsResource(${1:actual});"
        ]
    },
    "assertIsScalar": {
        "prefix": "assertIsScalar",
        "body": [
            "assertIsScalar(${1:actual});"
        ]
    },
    "assertIsString": {
        "prefix": "assertIsString",
        "body": [
            "assertIsString(${1:actual});"
        ]
    },
    "assertIsWritable": {
        "prefix": "assertIsWritable",
        "body": [
            "assertIsWritable(${1:string:filename});"
        ]
    },
    "assertJson": {
        "prefix": "assertJson",
        "body": [
            "assertJson(${1:string:actualJson});"
        ]
    },
    "assertJsonFileEqualsJsonFile": {
        "prefix": "assertJsonFileEqualsJsonFile",
        "body": [
            "assertJsonFileEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});"
        ]
    },
    "assertJsonFileNotEqualsJsonFile": {
        "prefix": "assertJsonFileNotEqualsJsonFile",
        "body": [
            "assertJsonFileNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualFile});"
        ]
    },
    "assertJsonStringEqualsJsonFile": {
        "prefix": "assertJsonStringEqualsJsonFile",
        "body": [
            "assertJsonStringEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});"
        ]
    },
    "assertJsonStringEqualsJsonString": {
        "prefix": "assertJsonStringEqualsJsonString",
        "body": [
            "assertJsonStringEqualsJsonString(${1:string:expectedJson}, ${2:string:actualJson});"
        ]
    },
    "assertJsonStringNotEqualsJsonFile": {
        "prefix": "assertJsonStringNotEqualsJsonFile",
        "body": [
            "assertJsonStringNotEqualsJsonFile(${1:string:expectedFile}, ${2:string:actualJson});"
        ]
    },
    "assertJsonStringNotEqualsJsonString": {
        "prefix": "assertJsonStringNotEqualsJsonString",
        "body": [
            "assertJsonStringNotEqualsJsonString(${1:expectedJson}, ${2:actualJson});"
        ]
    },
    "assertLessThan": {
        "prefix": "assertLessThan",
        "body": [
            "assertLessThan(${1:expected}, ${2:actual});"
        ]
    },
    "assertLessThanOrEqual": {
        "prefix": "assertLessThanOrEqual",
        "body": [
            "assertLessThanOrEqual(${1:expected}, ${2:actual});"
        ]
    },
    "assertMatchesRegularExpression": {
        "prefix": "assertMatchesRegularExpression",
        "body": [
            "assertMatchesRegularExpression(${1:string:pattern}, ${2:string:string});"
        ]
    },
    "assertNan": {
        "prefix": "assertNan",
        "body": [
            "assertNan(${1:actual});"
        ]
    },
    "assertNotContains": {
        "prefix": "assertNotContains",
        "body": [
            "assertNotContains(${1:needle}, ${2:iterable:haystack});"
        ]
    },
    "assertNotContainsEquals": {
        "prefix": "assertNotContainsEquals",
        "body": [
            "assertNotContainsEquals(${1:needle}, ${2:iterable:haystack});"
        ]
    },
    "assertNotContainsOnly": {
        "prefix": "assertNotContainsOnly",
        "body": [
            "assertNotContainsOnly(${1:string:type}, ${2:iterable:haystack});"
        ]
    },
    "assertNotCount": {
        "prefix": "assertNotCount",
        "body": [
            "assertNotCount(${1:int:expectedCount}, ${2:haystack});"
        ]
    },
    "assertNotEmpty": {
        "prefix": "assertNotEmpty",
        "body": [
            "assertNotEmpty(${1:actual});"
        ]
    },
    "assertNotEquals": {
        "prefix": "assertNotEquals",
        "body": [
            "assertNotEquals(${1:expected}, ${2:actual});"
        ]
    },
    "assertNotEqualsCanonicalizing": {
        "prefix": "assertNotEqualsCanonicalizing",
        "body": [
            "assertNotEqualsCanonicalizing(${1:expected}, ${2:actual});"
        ]
    },
    "assertNotEqualsIgnoringCase": {
        "prefix": "assertNotEqualsIgnoringCase",
        "body": [
            "assertNotEqualsIgnoringCase(${1:expected}, ${2:actual});"
        ]
    },
    "assertNotEqualsWithDelta": {
        "prefix": "assertNotEqualsWithDelta",
        "body": [
            "assertNotEqualsWithDelta(${1:expected}, ${2:actual}, ${3:float:delta});"
        ]
    },
    "assertNotFalse": {
        "prefix": "assertNotFalse",
        "body": [
            "assertNotFalse(${1:condition});"
        ]
    },
    "assertNotInstanceOf": {
        "prefix": "assertNotInstanceOf",
        "body": [
            "assertNotInstanceOf(${1:string:expected}, ${2:actual});"
        ]
    },
    "assertNotIsReadable": {
        "prefix": "assertNotIsReadable",
        "body": [
            "assertNotIsReadable(${1:string:filename});"
        ]
    },
    "assertNotIsWritable": {
        "prefix": "assertNotIsWritable",
        "body": [
            "assertNotIsWritable(${1:string:filename});"
        ]
    },
    "assertNotNull": {
        "prefix": "assertNotNull",
        "body": [
            "assertNotNull(${1:actual});"
        ]
    },
    "assertNotRegExp": {
        "prefix": "assertNotRegExp",
        "body": [
            "assertNotRegExp(${1:string:pattern}, ${2:string:string});"
        ]
    },
    "assertNotSame": {
        "prefix": "assertNotSame",
        "body": [
            "assertNotSame(${1:expected}, ${2:actual});"
        ]
    },
    "assertNotSameSize": {
        "prefix": "assertNotSameSize",
        "body": [
            "assertNotSameSize(${1:expected}, ${2:actual});"
        ]
    },
    "assertNotTrue": {
        "prefix": "assertNotTrue",
        "body": [
            "assertNotTrue(${1:condition});"
        ]
    },
    "assertNull": {
        "prefix": "assertNull",
        "body": [
            "assertNull(${1:actual});"
        ]
    },
    "assertObjectHasAttribute": {
        "prefix": "assertObjectHasAttribute",
        "body": [
            "assertObjectHasAttribute(${1:string:attributeName}, ${2:object});"
        ]
    },
    "assertObjectNotHasAttribute": {
        "prefix": "assertObjectNotHasAttribute",
        "body": [
            "assertObjectNotHasAttribute(${1:string:attributeName}, ${2:object});"
        ]
    },
    "assertRegExp": {
        "prefix": "assertRegExp",
        "body": [
            "assertRegExp(${1:string:pattern}, ${2:string:string});"
        ]
    },
    "assertSame": {
        "prefix": "assertSame",
        "body": [
            "assertSame(${1:expected}, ${2:actual});"
        ]
    },
    "assertSameSize": {
        "prefix": "assertSameSize",
        "body": [
            "assertSameSize(${1:expected}, ${2:actual});"
        ]
    },
    "assertStringContainsString": {
        "prefix": "assertStringContainsString",
        "body": [
            "assertStringContainsString(${1:string:needle}, ${2:string:haystack});"
        ]
    },
    "assertStringContainsStringIgnoringCase": {
        "prefix": "assertStringContainsStringIgnoringCase",
        "body": [
            "assertStringContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});"
        ]
    },
    "assertStringEndsNotWith": {
        "prefix": "assertStringEndsNotWith",
        "body": [
            "assertStringEndsNotWith(${1:string:suffix}, ${2:string:string});"
        ]
    },
    "assertStringEndsWith": {
        "prefix": "assertStringEndsWith",
        "body": [
            "assertStringEndsWith(${1:string:suffix}, ${2:string:string});"
        ]
    },
    "assertStringEqualsFile": {
        "prefix": "assertStringEqualsFile",
        "body": [
            "assertStringEqualsFile(${1:string:expectedFile}, ${2:string:actualString});"
        ]
    },
    "assertStringEqualsFileCanonicalizing": {
        "prefix": "assertStringEqualsFileCanonicalizing",
        "body": [
            "assertStringEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});"
        ]
    },
    "assertStringEqualsFileIgnoringCase": {
        "prefix": "assertStringEqualsFileIgnoringCase",
        "body": [
            "assertStringEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});"
        ]
    },
    "assertStringMatchesFormat": {
        "prefix": "assertStringMatchesFormat",
        "body": [
            "assertStringMatchesFormat(${1:string:format}, ${2:string:string});"
        ]
    },
    "assertStringMatchesFormatFile": {
        "prefix": "assertStringMatchesFormatFile",
        "body": [
            "assertStringMatchesFormatFile(${1:string:formatFile}, ${2:string:string});"
        ]
    },
    "assertStringNotContainsString": {
        "prefix": "assertStringNotContainsString",
        "body": [
            "assertStringNotContainsString(${1:string:needle}, ${2:string:haystack});"
        ]
    },
    "assertStringNotContainsStringIgnoringCase": {
        "prefix": "assertStringNotContainsStringIgnoringCase",
        "body": [
            "assertStringNotContainsStringIgnoringCase(${1:string:needle}, ${2:string:haystack});"
        ]
    },
    "assertStringNotEqualsFile": {
        "prefix": "assertStringNotEqualsFile",
        "body": [
            "assertStringNotEqualsFile(${1:string:expectedFile}, ${2:string:actualString});"
        ]
    },
    "assertStringNotEqualsFileCanonicalizing": {
        "prefix": "assertStringNotEqualsFileCanonicalizing",
        "body": [
            "assertStringNotEqualsFileCanonicalizing(${1:string:expectedFile}, ${2:string:actualString});"
        ]
    },
    "assertStringNotEqualsFileIgnoringCase": {
        "prefix": "assertStringNotEqualsFileIgnoringCase",
        "body": [
            "assertStringNotEqualsFileIgnoringCase(${1:string:expectedFile}, ${2:string:actualString});"
        ]
    },
    "assertStringNotMatchesFormat": {
        "prefix": "assertStringNotMatchesFormat",
        "body": [
            "assertStringNotMatchesFormat(${1:string:format}, ${2:string:string});"
        ]
    },
    "assertStringNotMatchesFormatFile": {
        "prefix": "assertStringNotMatchesFormatFile",
        "body": [
            "assertStringNotMatchesFormatFile(${1:string:formatFile}, ${2:string:string});"
        ]
    },
    "assertStringStartsNotWith": {
        "prefix": "assertStringStartsNotWith",
        "body": [
            "assertStringStartsNotWith(${1:prefix}, ${2:string});"
        ]
    },
    "assertStringStartsWith": {
        "prefix": "assertStringStartsWith",
        "body": [
            "assertStringStartsWith(${1:string:prefix}, ${2:string:string});"
        ]
    },
    "assertThat": {
        "prefix": "assertThat",
        "body": [
            "assertThat(${1:value}, ${2:PHPUnit\\Framework\\Constraint\\Constraint:constraint});"
        ]
    },
    "assertTrue": {
        "prefix": "assertTrue",
        "body": [
            "assertTrue(${1:condition});"
        ]
    },
    "assertXmlFileEqualsXmlFile": {
        "prefix": "assertXmlFileEqualsXmlFile",
        "body": [
            "assertXmlFileEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});"
        ]
    },
    "assertXmlFileNotEqualsXmlFile": {
        "prefix": "assertXmlFileNotEqualsXmlFile",
        "body": [
            "assertXmlFileNotEqualsXmlFile(${1:string:expectedFile}, ${2:string:actualFile});"
        ]
    },
    "assertXmlStringEqualsXmlFile": {
        "prefix": "assertXmlStringEqualsXmlFile",
        "body": [
            "assertXmlStringEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});"
        ]
    },
    "assertXmlStringEqualsXmlString": {
        "prefix": "assertXmlStringEqualsXmlString",
        "body": [
            "assertXmlStringEqualsXmlString(${1:expectedXml}, ${2:actualXml});"
        ]
    },
    "assertXmlStringNotEqualsXmlFile": {
        "prefix": "assertXmlStringNotEqualsXmlFile",
        "body": [
            "assertXmlStringNotEqualsXmlFile(${1:string:expectedFile}, ${2:actualXml});"
        ]
    },
    "assertXmlStringNotEqualsXmlString": {
        "prefix": "assertXmlStringNotEqualsXmlString",
        "body": [
            "assertXmlStringNotEqualsXmlString(${1:expectedXml}, ${2:actualXml});"
        ]
    },
    "at": {
        "prefix": "at",
        "body": [
            "at(${1:int:index});"
        ]
    },
    "atLeast": {
        "prefix": "atLeast",
        "body": [
            "atLeast(${1:int:requiredInvocations});"
        ]
    },
    "atLeastOnce": {
        "prefix": "atLeastOnce",
        "body": [
            "atLeastOnce();"
        ]
    },
    "atMost": {
        "prefix": "atMost",
        "body": [
            "atMost(${1:int:allowedInvocations});"
        ]
    },
    "callback": {
        "prefix": "callback",
        "body": [
            "callback(${1:callable:callback});"
        ]
    },
    "classHasAttribute": {
        "prefix": "classHasAttribute",
        "body": [
            "classHasAttribute(${1:string:attributeName});"
        ]
    },
    "classHasStaticAttribute": {
        "prefix": "classHasStaticAttribute",
        "body": [
            "classHasStaticAttribute(${1:string:attributeName});"
        ]
    },
    "containsEqual": {
        "prefix": "containsEqual",
        "body": [
            "containsEqual(${1:value});"
        ]
    },
    "containsIdentical": {
        "prefix": "containsIdentical",
        "body": [
            "containsIdentical(${1:value});"
        ]
    },
    "containsOnly": {
        "prefix": "containsOnly",
        "body": [
            "containsOnly(${1:string:type});"
        ]
    },
    "containsOnlyInstancesOf": {
        "prefix": "containsOnlyInstancesOf",
        "body": [
            "containsOnlyInstancesOf(${1:string:className});"
        ]
    },
    "countOf": {
        "prefix": "countOf",
        "body": [
            "countOf(${1:int:count});"
        ]
    },
    "createConfiguredMock": {
        "prefix": "createConfiguredMock",
        "body": [
            "createConfiguredMock(${1:string:originalClassName}, ${2:array:configuration});"
        ]
    },
    "createMock": {
        "prefix": "createMock",
        "body": [
            "createMock(${1:string:originalClassName});"
        ]
    },
    "createPartialMock": {
        "prefix": "createPartialMock",
        "body": [
            "createPartialMock(${1:string:originalClassName}, ${2:array:methods});"
        ]
    },
    "createStub": {
        "prefix": "createStub",
        "body": [
            "createStub(${1:string:originalClassName});"
        ]
    },
    "createTestProxy": {
        "prefix": "createTestProxy",
        "body": [
            "createTestProxy(${1:string:originalClassName});"
        ]
    },
    "directoryExists": {
        "prefix": "directoryExists",
        "body": [
            "directoryExists();"
        ]
    },
    "equalTo": {
        "prefix": "equalTo",
        "body": [
            "equalTo(${1:value});"
        ]
    },
    "equalToCanonicalizing": {
        "prefix": "equalToCanonicalizing",
        "body": [
            "equalToCanonicalizing(${1:value});"
        ]
    },
    "equalToIgnoringCase": {
        "prefix": "equalToIgnoringCase",
        "body": [
            "equalToIgnoringCase(${1:value});"
        ]
    },
    "equalToWithDelta": {
        "prefix": "equalToWithDelta",
        "body": [
            "equalToWithDelta(${1:value}, ${2:float:delta});"
        ]
    },
    "exactly": {
        "prefix": "exactly",
        "body": [
            "exactly(${1:int:count});"
        ]
    },
    "expectDeprecation": {
        "prefix": "expectDeprecation",
        "body": [
            "expectDeprecation();"
        ]
    },
    "expectDeprecationMessage": {
        "prefix": "expectDeprecationMessage",
        "body": [
            "expectDeprecationMessage(${1:string:message});"
        ]
    },
    "expectDeprecationMessageMatches": {
        "prefix": "expectDeprecationMessageMatches",
        "body": [
            "expectDeprecationMessageMatches(${1:string:regularExpression});"
        ]
    },
    "expectError": {
        "prefix": "expectError",
        "body": [
            "expectError();"
        ]
    },
    "expectErrorMessage": {
        "prefix": "expectErrorMessage",
        "body": [
            "expectErrorMessage(${1:string:message});"
        ]
    },
    "expectErrorMessageMatches": {
        "prefix": "expectErrorMessageMatches",
        "body": [
            "expectErrorMessageMatches(${1:string:regularExpression});"
        ]
    },
    "expectException": {
        "prefix": "expectException",
        "body": [
            "expectException(${1:string:exception});"
        ]
    },
    "expectExceptionCode": {
        "prefix": "expectExceptionCode",
        "body": [
            "expectExceptionCode(${1:code});"
        ]
    },
    "expectExceptionMessage": {
        "prefix": "expectExceptionMessage",
        "body": [
            "expectExceptionMessage(${1:string:message});"
        ]
    },
    "expectExceptionMessageMatches": {
        "prefix": "expectExceptionMessageMatches",
        "body": [
            "expectExceptionMessageMatches(${1:string:regularExpression});"
        ]
    },
    "expectExceptionObject": {
        "prefix": "expectExceptionObject",
        "body": [
            "expectExceptionObject(${1:Exception:exception});"
        ]
    },
    "expectNotice": {
        "prefix": "expectNotice",
        "body": [
            "expectNotice();"
        ]
    },
    "expectNoticeMessage": {
        "prefix": "expectNoticeMessage",
        "body": [
            "expectNoticeMessage(${1:string:message});"
        ]
    },
    "expectNoticeMessageMatches": {
        "prefix": "expectNoticeMessageMatches",
        "body": [
            "expectNoticeMessageMatches(${1:string:regularExpression});"
        ]
    },
    "expectNotToPerformAssertions": {
        "prefix": "expectNotToPerformAssertions",
        "body": [
            "expectNotToPerformAssertions();"
        ]
    },
    "expectOutputRegex": {
        "prefix": "expectOutputRegex",
        "body": [
            "expectOutputRegex(${1:string:expectedRegex});"
        ]
    },
    "expectOutputString": {
        "prefix": "expectOutputString",
        "body": [
            "expectOutputString(${1:string:expectedString});"
        ]
    },
    "expectWarning": {
        "prefix": "expectWarning",
        "body": [
            "expectWarning();"
        ]
    },
    "expectWarningMessage": {
        "prefix": "expectWarningMessage",
        "body": [
            "expectWarningMessage(${1:string:message});"
        ]
    },
    "expectWarningMessageMatches": {
        "prefix": "expectWarningMessageMatches",
        "body": [
            "expectWarningMessageMatches(${1:string:regularExpression});"
        ]
    },
    "fail": {
        "prefix": "fail",
        "body": [
            "fail($1);"
        ]
    },
    "fileExists": {
        "prefix": "fileExists",
        "body": [
            "fileExists();"
        ]
    },
    "getExpectedException": {
        "prefix": "getExpectedException",
        "body": [
            "getExpectedException();"
        ]
    },
    "getExpectedExceptionCode": {
        "prefix": "getExpectedExceptionCode",
        "body": [
            "getExpectedExceptionCode();"
        ]
    },
    "getExpectedExceptionMessage": {
        "prefix": "getExpectedExceptionMessage",
        "body": [
            "getExpectedExceptionMessage();"
        ]
    },
    "getExpectedExceptionMessageRegExp": {
        "prefix": "getExpectedExceptionMessageRegExp",
        "body": [
            "getExpectedExceptionMessageRegExp();"
        ]
    },
    "getMockBuilder": {
        "prefix": "getMockBuilder",
        "body": [
            "getMockBuilder(${1:string:className});"
        ]
    },
    "getMockClass": {
        "prefix": "getMockClass",
        "body": [
            "getMockClass(${1:string:originalClassName});"
        ]
    },
    "getMockForAbstractClass": {
        "prefix": "getMockForAbstractClass",
        "body": [
            "getMockForAbstractClass(${1:string:originalClassName});"
        ]
    },
    "getMockForTrait": {
        "prefix": "getMockForTrait",
        "body": [
            "getMockForTrait(${1:string:traitName});"
        ]
    },
    "getMockFromWsdl": {
        "prefix": "getMockFromWsdl",
        "body": [
            "getMockFromWsdl(${1:string:wsdlFile});"
        ]
    },
    "greaterThan": {
        "prefix": "greaterThan",
        "body": [
            "greaterThan(${1:value});"
        ]
    },
    "greaterThanOrEqual": {
        "prefix": "greaterThanOrEqual",
        "body": [
            "greaterThanOrEqual(${1:value});"
        ]
    },
    "identicalTo": {
        "prefix": "identicalTo",
        "body": [
            "identicalTo(${1:value});"
        ]
    },
    "isEmpty": {
        "prefix": "isEmpty",
        "body": [
            "isEmpty();"
        ]
    },
    "isFalse": {
        "prefix": "isFalse",
        "body": [
            "isFalse();"
        ]
    },
    "isFinite": {
        "prefix": "isFinite",
        "body": [
            "isFinite();"
        ]
    },
    "isInfinite": {
        "prefix": "isInfinite",
        "body": [
            "isInfinite();"
        ]
    },
    "isInIsolation": {
        "prefix": "isInIsolation",
        "body": [
            "isInIsolation();"
        ]
    },
    "isInstanceOf": {
        "prefix": "isInstanceOf",
        "body": [
            "isInstanceOf(${1:string:className});"
        ]
    },
    "isJson": {
        "prefix": "isJson",
        "body": [
            "isJson();"
        ]
    },
    "isLarge": {
        "prefix": "isLarge",
        "body": [
            "isLarge();"
        ]
    },
    "isMedium": {
        "prefix": "isMedium",
        "body": [
            "isMedium();"
        ]
    },
    "isNan": {
        "prefix": "isNan",
        "body": [
            "isNan();"
        ]
    },
    "isNull": {
        "prefix": "isNull",
        "body": [
            "isNull();"
        ]
    },
    "isReadable": {
        "prefix": "isReadable",
        "body": [
            "isReadable();"
        ]
    },
    "isSmall": {
        "prefix": "isSmall",
        "body": [
            "isSmall();"
        ]
    },
    "isTrue": {
        "prefix": "isTrue",
        "body": [
            "isTrue();"
        ]
    },
    "isType": {
        "prefix": "isType",
        "body": [
            "isType(${1:string:type});"
        ]
    },
    "isWritable": {
        "prefix": "isWritable",
        "body": [
            "isWritable();"
        ]
    },
    "lessThan": {
        "prefix": "lessThan",
        "body": [
            "lessThan(${1:value});"
        ]
    },
    "lessThanOrEqual": {
        "prefix": "lessThanOrEqual",
        "body": [
            "lessThanOrEqual(${1:value});"
        ]
    },
    "logicalAnd": {
        "prefix": "logicalAnd",
        "body": [
            "logicalAnd();"
        ]
    },
    "logicalNot": {
        "prefix": "logicalNot",
        "body": [
            "logicalNot(${1:PHPUnit\\Framework\\Constraint\\Constraint:constraint});"
        ]
    },
    "logicalOr": {
        "prefix": "logicalOr",
        "body": [
            "logicalOr();"
        ]
    },
    "logicalXor": {
        "prefix": "logicalXor",
        "body": [
            "logicalXor();"
        ]
    },
    "markAsRisky": {
        "prefix": "markAsRisky",
        "body": [
            "markAsRisky();"
        ]
    },
    "markTestIncomplete": {
        "prefix": "markTestIncomplete",
        "body": [
            "markTestIncomplete($1);"
        ]
    },
    "markTestSkipped": {
        "prefix": "markTestSkipped",
        "body": [
            "markTestSkipped($1);"
        ]
    },
    "matches": {
        "prefix": "matches",
        "body": [
            "matches(${1:string:string});"
        ]
    },
    "matchesRegularExpression": {
        "prefix": "matchesRegularExpression",
        "body": [
            "matchesRegularExpression(${1:string:pattern});"
        ]
    },
    "never": {
        "prefix": "never",
        "body": [
            "never();"
        ]
    },
    "objectHasAttribute": {
        "prefix": "objectHasAttribute",
        "body": [
            "objectHasAttribute(${1:attributeName});"
        ]
    },
    "once": {
        "prefix": "once",
        "body": [
            "once();"
        ]
    },
    "onConsecutiveCalls": {
        "prefix": "onConsecutiveCalls",
        "body": [
            "onConsecutiveCalls($1);"
        ]
    },
    "recordDoubledType": {
        "prefix": "recordDoubledType",
        "body": [
            "recordDoubledType(${1:string:originalClassName});"
        ]
    },
    "returnArgument": {
        "prefix": "returnArgument",
        "body": [
            "returnArgument(${1:int:argumentIndex});"
        ]
    },
    "returnCallback": {
        "prefix": "returnCallback",
        "body": [
            "returnCallback(${1:callback});"
        ]
    },
    "returnSelf": {
        "prefix": "returnSelf",
        "body": [
            "returnSelf();"
        ]
    },
    "returnValue": {
        "prefix": "returnValue",
        "body": [
            "returnValue(${1:value});"
        ]
    },
    "returnValueMap": {
        "prefix": "returnValueMap",
        "body": [
            "returnValueMap(${1:array:valueMap});"
        ]
    },
    "setOutputCallback": {
        "prefix": "setOutputCallback",
        "body": [
            "setOutputCallback(${1:callable:callback});"
        ]
    },
    "stringContains": {
        "prefix": "stringContains",
        "body": [
            "stringContains(${1:string:string});"
        ]
    },
    "stringEndsWith": {
        "prefix": "stringEndsWith",
        "body": [
            "stringEndsWith(${1:string:suffix});"
        ]
    },
    "stringStartsWith": {
        "prefix": "stringStartsWith",
        "body": [
            "stringStartsWith(${1:prefix});"
        ]
    },
    "throwException": {
        "prefix": "throwException",
        "body": [
            "throwException(${1:Throwable:exception});"
        ]
    }
}